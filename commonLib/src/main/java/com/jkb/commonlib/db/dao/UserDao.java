package com.jkb.commonlib.db.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.jkb.commonlib.db.entity.User;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "user".
*/
public class UserDao extends AbstractDao<User, Long> {

    public static final String TABLENAME = "user";

    /**
     * Properties of entity User.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property UserId = new Property(1, int.class, "userId", false, "user_id");
        public final static Property Password = new Property(2, String.class, "password", false, "password");
        public final static Property Phone = new Property(3, String.class, "phone", false, "phone");
        public final static Property Nickname = new Property(4, String.class, "nickname", false, "nickname");
        public final static Property Avatar = new Property(5, String.class, "avatar", false, "avatar");
        public final static Property UpdateTime = new Property(6, java.util.Date.class, "updateTime", false, "update_time");
    }


    public UserDao(DaoConfig config) {
        super(config);
    }
    
    public UserDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"user\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"user_id\" INTEGER NOT NULL UNIQUE ," + // 1: userId
                "\"password\" TEXT NOT NULL ," + // 2: password
                "\"phone\" TEXT NOT NULL UNIQUE ," + // 3: phone
                "\"nickname\" TEXT NOT NULL ," + // 4: nickname
                "\"avatar\" TEXT NOT NULL ," + // 5: avatar
                "\"update_time\" INTEGER NOT NULL );"); // 6: updateTime
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"user\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, User entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getUserId());
        stmt.bindString(3, entity.getPassword());
        stmt.bindString(4, entity.getPhone());
        stmt.bindString(5, entity.getNickname());
        stmt.bindString(6, entity.getAvatar());
        stmt.bindLong(7, entity.getUpdateTime().getTime());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, User entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getUserId());
        stmt.bindString(3, entity.getPassword());
        stmt.bindString(4, entity.getPhone());
        stmt.bindString(5, entity.getNickname());
        stmt.bindString(6, entity.getAvatar());
        stmt.bindLong(7, entity.getUpdateTime().getTime());
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public User readEntity(Cursor cursor, int offset) {
        User entity = new User( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getInt(offset + 1), // userId
            cursor.getString(offset + 2), // password
            cursor.getString(offset + 3), // phone
            cursor.getString(offset + 4), // nickname
            cursor.getString(offset + 5), // avatar
            new java.util.Date(cursor.getLong(offset + 6)) // updateTime
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, User entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setUserId(cursor.getInt(offset + 1));
        entity.setPassword(cursor.getString(offset + 2));
        entity.setPhone(cursor.getString(offset + 3));
        entity.setNickname(cursor.getString(offset + 4));
        entity.setAvatar(cursor.getString(offset + 5));
        entity.setUpdateTime(new java.util.Date(cursor.getLong(offset + 6)));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(User entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(User entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(User entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
