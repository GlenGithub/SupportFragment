package com.jkb.commonlib.db.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.jkb.commonlib.db.entity.Status;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "status".
*/
public class StatusDao extends AbstractDao<Status, Long> {

    public static final String TABLENAME = "status";

    /**
     * Properties of entity Status.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Version = new Property(1, String.class, "version", false, "version");
        public final static Property Flag_login = new Property(2, boolean.class, "flag_login", false, "flag_login");
        public final static Property User_id = new Property(3, int.class, "user_id", false, "user_id");
        public final static Property Create_time = new Property(4, java.util.Date.class, "create_time", false, "create_time");
    }


    public StatusDao(DaoConfig config) {
        super(config);
    }
    
    public StatusDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"status\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"version\" TEXT NOT NULL ," + // 1: version
                "\"flag_login\" INTEGER NOT NULL ," + // 2: flag_login
                "\"user_id\" INTEGER NOT NULL ," + // 3: user_id
                "\"create_time\" INTEGER NOT NULL );"); // 4: create_time
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"status\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Status entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindString(2, entity.getVersion());
        stmt.bindLong(3, entity.getFlag_login() ? 1L: 0L);
        stmt.bindLong(4, entity.getUser_id());
        stmt.bindLong(5, entity.getCreate_time().getTime());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Status entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindString(2, entity.getVersion());
        stmt.bindLong(3, entity.getFlag_login() ? 1L: 0L);
        stmt.bindLong(4, entity.getUser_id());
        stmt.bindLong(5, entity.getCreate_time().getTime());
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public Status readEntity(Cursor cursor, int offset) {
        Status entity = new Status( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getString(offset + 1), // version
            cursor.getShort(offset + 2) != 0, // flag_login
            cursor.getInt(offset + 3), // user_id
            new java.util.Date(cursor.getLong(offset + 4)) // create_time
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Status entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setVersion(cursor.getString(offset + 1));
        entity.setFlag_login(cursor.getShort(offset + 2) != 0);
        entity.setUser_id(cursor.getInt(offset + 3));
        entity.setCreate_time(new java.util.Date(cursor.getLong(offset + 4)));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(Status entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(Status entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Status entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
